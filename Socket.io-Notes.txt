// What is Socket.IO?
// Definition: Socket.IO is a powerful library that enables real-time, bidirectional, and event-based communication between clients and servers.
// Use Cases.....
// Real-time messaging apps (like WhatsApp, Slack).
// Live notifications (e.g., stock prices, sports scores).
// Collaborative tools (e.g., Google Docs).
// Real-time gaming.

// We all are familiar with real-time messaging applications and use them quite often. These have become a part of our life. But did you ever thought about how these realtime-applications built? Itâ€™s because of Socket.IO
=========================================================

// Key Features of Socket.IO
// Real-Time Communication: Enables instant updates between client and server.
// Cross-Browser Support: Works seamlessly across different browsers, even older ones.
// Automatic Fallback: Automatically switches to polling if WebSocket is unavailable.
// Event-Driven Architecture: Communicate using events like connect, message, disconnect, etc.

// To set up Socket.IO, we must mount it on our Express.js server so that we can listen to events. We do so by writing the following code in our index.js,
=========================================================

Installing Socket.IO
Server-Side Installation:
To install the server-side library....

npm install socket.io

==========================================================

Client-Side Installation:
For the browser, include the Socket.IO client library:
Via CDN....
<script src="/socket.io/socket.io.js"></script>

===============================================

Via npm (for modern frontends like React)...
npm install socket.io-client

================Setting up Socket.IO on the Server=============================

const express = require('express');
const socketio = require('socket.io');
const http = require('http');

// Create an Express app
const app = express();

// Create an HTTP server to integrate with Socket.IO
const server = http.createServer(app);

// Attach Socket.IO to the server
const io = socketio(server);

// Serve an HTML page
const path = require('path');
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// Listen for Socket.IO connections
io.on('connection', (socket) => {
  console.log(`New client connected: ${socket.id}`);

  // Listening for an event from the client
  socket.on('message', (data) => {
    console.log(`Message from ${socket.id}: ${data}`);
    // Broadcasting data to all clients
    io.emit('message', `Server received: ${data}`);
  });

  // Handle disconnection
  socket.on('disconnect', () => {
    console.log(`Client disconnected: ${socket.id}`);
  });
});

// Start the server
server.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});

=========================================================

// Setting up Socket.IO on the client...
// Similar to what we did for the server setup, we will divide the setup of Socket.IO on the client side into several steps. As a result, we will be able to get a general idea of how to structure Socket.IO on the client side.

// Inside the root directory, create a directory named client. Inside the client directory, create an index.html file with some boilerplate HTML,

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Socket.IO Demo</title>
</head>
<body>
  <h1>Socket.IO Demo</h1>
  <input id="messageInput" placeholder="Type a message" />
  <button id="sendButton">Send</button>
  <ul id="messages"></ul>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Connect to the server
    const socket = io();

    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const messagesList = document.getElementById('messages');

    sendButton.addEventListener('click', () => {
      const message = messageInput.value;
      socket.emit('message', message);
      messageInput.value = '';
    });

    socket.on('message', (data) => {
      const listItem = document.createElement('li');
      listItem.textContent = data;
      messagesList.appendChild(listItem);
    });
  </script>
</body>
</html>


=======================================================
Events in Socket.IO
Default Events:

connection: Triggered when a client connects.
disconnect: Triggered when a client disconnects.
Custom Events:

You can define custom events like message, joinRoom, or typing.

======================================================

Quick Summary
Install socket.io for the server and socket.io-client for the browser.
Integrate with your existing Express server by passing it to socketio(server).
Listen for connection events and define custom events for real-time communication.
Use rooms for grouping clients and namespaces for separate domains of communication.